infra/
└── terraform/
    ├── main.tf
    ├── variables.tf
    ├── outputs.tf
    └── provider.tf


provider.tf — configure AWS provider:


terraform {
  required_version = ">= 1.1"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = var.aws_region
}


variables.tf:
variable "aws_region" {
  default = "ap-south-1"
}

variable "frontend_vpc_cidr" {
  default = "10.0.0.0/16"
}

variable "backend_vpc_cidr" {
  default = "10.1.0.0/16"
}


main.tf:


# FRONTEND VPC
resource "aws_vpc" "frontend_vpc" {
  cidr_block = var.frontend_vpc_cidr
  enable_dns_support   = true
  enable_dns_hostnames = true
  tags = { Name = "frontend-vpc" }
}

resource "aws_subnet" "frontend_subnet_1a" {
  vpc_id            = aws_vpc.frontend_vpc.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "ap-south-1a"
  map_public_ip_on_launch = true
  tags = { Name = "frontend-subnet-1a" }
}

resource "aws_subnet" "frontend_subnet_1b" {
  vpc_id                  = aws_vpc.frontend_vpc.id
  cidr_block              = "10.0.2.0/24"
  availability_zone       = "ap-south-1b"
  map_public_ip_on_launch = true
  tags = {
    Name = "frontend-subnet-1b"
  }
}

resource "aws_subnet" "frontend_subnet_1c" {
  vpc_id                  = aws_vpc.frontend_vpc.id
  cidr_block              = "10.0.3.0/24"
  availability_zone       = "ap-south-1c"
  map_public_ip_on_launch = true
  tags = {
    Name = "frontend-subnet-1c"
  }
}

# BACKEND VPC
resource "aws_vpc" "backend_vpc" {
  cidr_block = var.backend_vpc_cidr
  enable_dns_support   = true
  enable_dns_hostnames = true
  tags = { Name = "backend-vpc" }
}

resource "aws_subnet" "backend_subnet_1a" {
  vpc_id            = aws_vpc.backend_vpc.id
  cidr_block        = "10.1.1.0/24"
  availability_zone = "ap-south-1a"
  map_public_ip_on_launch = true
  tags = { Name = "backend-subnet-1a" }
}

resource "aws_subnet" "backend_subnet_1b" {
  vpc_id            = aws_vpc.backend_vpc.id
  cidr_block        = "10.1.2.0/24"
  availability_zone = "ap-south-1b"
  map_public_ip_on_launch = true
  tags = { Name = "backend-subnet-1b" }
}

resource "aws_subnet" "backend_subnet_1c" {
  vpc_id            = aws_vpc.backend_vpc.id
  cidr_block        = "10.1.3.0/24"
  availability_zone = "ap-south-1c"
  map_public_ip_on_launch = true
  tags = { Name = "backend-subnet-1c" }
}



# Frontend IGW
resource "aws_internet_gateway" "frontend_igw" {
  vpc_id = aws_vpc.frontend_vpc.id
  tags   = { Name = "frontend-igw" }
}

# Backend IGW
resource "aws_internet_gateway" "backend_igw" {
  vpc_id = aws_vpc.backend_vpc.id
  tags   = { Name = "backend-igw" }
}

# Frontend Route Table
resource "aws_route_table" "frontend_rt" {
  vpc_id = aws_vpc.frontend_vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.frontend_igw.id
  }
  tags = { Name = "frontend-rt" }
}

resource "aws_route_table_association" "frontend_rta_1a" {
  subnet_id      = aws_subnet.frontend_subnet_1a.id
  route_table_id = aws_route_table.frontend_rt.id
}


resource "aws_route_table_association" "frontend_rta_1b" {
  subnet_id      = aws_subnet.frontend_subnet_1b.id
  route_table_id = aws_route_table.frontend_rt.id
}


resource "aws_route_table_association" "frontend_rta_1c" {
  subnet_id      = aws_subnet.frontend_subnet_1c.id
  route_table_id = aws_route_table.frontend_rt.id
}

# Backend Route Table
resource "aws_route_table" "backend_rt" {
  vpc_id = aws_vpc.backend_vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.backend_igw.id
  }
  tags = { Name = "backend-rt" }
}

resource "aws_route_table_association" "backend_rta_1a" {
  subnet_id      = aws_subnet.backend_subnet_1a.id
  route_table_id = aws_route_table.backend_rt.id
}

resource "aws_route_table_association" "backend_rta_1b" {
  subnet_id      = aws_subnet.backend_subnet_1b.id
  route_table_id = aws_route_table.backend_rt.id
}

resource "aws_route_table_association" "backend_rta_1c" {
  subnet_id      = aws_subnet.backend_subnet_1c.id
  route_table_id = aws_route_table.backend_rt.id
}



# Frontend SG
resource "aws_security_group" "frontend_sg" {
  name        = "frontend-sg"
  description = "Allow HTTP/HTTPS"
  vpc_id      = aws_vpc.frontend_vpc.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Backend SG
resource "aws_security_group" "backend_sg" {
  name        = "backend-sg"
  description = "Allow internal traffic"
  vpc_id      = aws_vpc.backend_vpc.id

  ingress {
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = [var.frontend_vpc_cidr]  # only frontend VPC can access
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# IAM role for EKS


resource "aws_iam_role" "cbz_eks_cluster_role" {
  name = "cbz_eks_frontendcluster_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Effect    = "Allow"
      Principal = { Service = "eks.amazonaws.com" }
      Action    = ["sts:AssumeRole", "sts:TagSession"]
    }]
  })
}

resource "aws_iam_role_policy_attachment" "eks_cluster_AmazonEKSClusterPolicy" {
  role       = aws_iam_role.cbz_eks_cluster_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
}

# IAM Role for EKS Node Group
resource "aws_iam_role" "cbz_eks_node_group_role" {
  name = "cbz_eks_node_group_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Effect    = "Allow"
      Principal = { Service = "ec2.amazonaws.com" }
      Action    = "sts:AssumeRole"
    }]
  })
}

resource "aws_iam_role_policy_attachment" "eks_node_AmazonEKSWorkerNodePolicy" {
  role       = aws_iam_role.cbz_eks_node_group_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
}

resource "aws_iam_role_policy_attachment" "eks_node_AmazonEKS_CNI_Policy" {
  role       = aws_iam_role.cbz_eks_node_group_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
}

resource "aws_iam_role_policy_attachment" "eks_node_AmazonEC2ContainerRegistryReadOnly" {
  role       = aws_iam_role.cbz_eks_node_group_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
}

# EKS frontend Cluster

resource "aws_eks_cluster" "my_frontendcluster" {
  name     = "my-frontendcluster"
  role_arn = aws_iam_role.cbz_eks_cluster_role.arn

  vpc_config {
    subnet_ids = [aws_subnet.frontend_subnet_1a.id, aws_subnet.frontend_subnet_1b.id, aws_subnet.frontend_subnet_1c.id]
  }

  depends_on = [
    aws_iam_role_policy_attachment.eks_cluster_AmazonEKSClusterPolicy
  ]
}

# EKS backend Cluster

resource "aws_eks_cluster" "my_backendcluster" {
  name     = "my-backendcluster"
  role_arn = aws_iam_role.cbz_eks_cluster_role.arn

  vpc_config {
    subnet_ids = [aws_subnet.backend_subnet_1a.id, aws_subnet.backend_subnet_1b.id, aws_subnet.backend_subnet_1c.id]
  }

  depends_on = [
    aws_iam_role_policy_attachment.eks_cluster_AmazonEKSClusterPolicy
  ]
}

######
# EKS frontend Node Group
resource "aws_eks_node_group" "frontendnodegroup" {
  cluster_name    = aws_eks_cluster.my_frontendcluster.name
  node_group_name = "frontend-node-group"
  node_role_arn   = aws_iam_role.cbz_eks_node_group_role.arn
  subnet_ids      = [aws_subnet.frontend_subnet_1a.id, aws_subnet.frontend_subnet_1b.id, aws_subnet.frontend_subnet_1c.id]
  instance_types  = ["t2.medium"]

  scaling_config {
    desired_size = 2
    max_size     = 3
    min_size     = 1
  }

  update_config {
    max_unavailable = 1
  }

  depends_on = [
    aws_iam_role_policy_attachment.eks_node_AmazonEKSWorkerNodePolicy,
    aws_iam_role_policy_attachment.eks_node_AmazonEKS_CNI_Policy,
    aws_iam_role_policy_attachment.eks_node_AmazonEC2ContainerRegistryReadOnly
  ]
}


# EKS backend Node Group
resource "aws_eks_node_group" "backendnodegroup" {
  cluster_name    = aws_eks_cluster.my_backendcluster.name
  node_group_name = "backend-node-group"
  node_role_arn   = aws_iam_role.cbz_eks_node_group_role.arn
  subnet_ids      = [aws_subnet.backend_subnet_1a.id, aws_subnet.backend_subnet_1b.id, aws_subnet.backend_subnet_1c.id]
  instance_types  = ["t2.medium"]

  scaling_config {
    desired_size = 2
    max_size     = 3
    min_size     = 1
  }

  update_config {
    max_unavailable = 1
  }

  depends_on = [
    aws_iam_role_policy_attachment.eks_node_AmazonEKSWorkerNodePolicy,
    aws_iam_role_policy_attachment.eks_node_AmazonEKS_CNI_Policy,
    aws_iam_role_policy_attachment.eks_node_AmazonEC2ContainerRegistryReadOnly
  ]
}

outputs.tf

output "frontend_vpc_id" {
  value = aws_vpc.frontend_vpc.id
}

output "backend_vpc_id" {
  value = aws_vpc.backend_vpc.id
}


output "frontend_eks_cluster_name" {
  description = "EKS Cluster Name"
  value       = aws_eks_frontendcluster.my_frontendcluster.name
}


output "backend_eks_cluster_name" {
  description = "EKS Cluster Name"
  value       = aws_eks_backendcluster.my_backendcluster.name
}

